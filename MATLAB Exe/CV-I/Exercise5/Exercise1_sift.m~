addpath('sift');

im1 = imread(


I1=imreadbw('tum_mi_1.JPG') ;
I2=imreadbw('tum_mi_2.JPG') ;

I1=I1-min(I1(:)) ;
I1=I1/max(I1(:)) ;
I2=I2-min(I2(:)) ;
I2=I2/max(I2(:)) ;

[frames1,descr1,gss1,dogss1] = sift( I1 ) ;
[frames2,descr2,gss2,dogss2] = sift( I2 ) ;

descr1=uint8(512*descr1) ;
descr2=uint8(512*descr2) ;

matches=siftmatch( descr1, descr2 ) ;

h = robust_matching_adaptive(frames1(1:2,matches(1,:)),frames2(1:2,matches(2,:)));

t = maketform('projective',h');
corr_im = imtransform(im1,t);

[m n o] = size(im1);
[m2 n2 o2] = size(im2);

dest_coord = [tformfwd([0,0],t),tformfwd([0,n],t); tformfwd([0,0],t),tformfwd([m,0],t)];

corr_im_coord = [0 0];
corr_im_coord(1) = min(dest_coord(1,1),dest_coord(1,3));
corr_im_coord(2) = min(dest_coord(2,2),dest_coord(2,4));

horiz_offset = 1000;
vert_offset = 200;
final_im = uint8(zeros(800,2000));

[mc nc oc] = size(corr_im);

for i = 1:mc
    for j = 1:nc
        for k = 1:3
            final_im(round(i + corr_im_coord(2) + vert_offset),round(j + corr_im_coord(1)+horiz_offset+10),k) = corr_im(i,j,k);
        end
    end
end


for i=1:m2
    for j = 1:n2
        for k = 1:3
%             final_im(i+vert_offset,j+horiz_offset,k) = final_im(i+vert_offset,j+horiz_offset,k) + im2(i,j,k);
              final_im(i+vert_offset,j+horiz_offset,k) = im2(i,j,k);
        end
    end
end



figure(1); imshow(im1);
figure(2); imshow(im2);
figure(3); imshow(final_im);
pause
close all;